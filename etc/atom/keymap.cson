# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
## MINE
'atom-workspace atom-text-editor:not([mini])':
  'ctrl-alt-p': 'editor:move-line-up'
  'ctrl-alt-n': 'editor:move-line-down'
  
## Vim Mode
# all
# all except normal
# -------------------------
'.platform-darwin atom-text-editor.vim-mode-plus:not(.normal-mode)':
  'ctrl-c': 'vim-mode-plus:activate-normal-mode'

# text-editor
'atom-text-editor:not([mini])':
  'ctrl-i': 'cursor-history:next'
  'ctrl-o': 'cursor-history:prev'
  'ctrl-cmd-i': 'cursor-history:next-within-editor'
  'ctrl-cmd-o': 'cursor-history:prev-within-editor'

# normal
# -------------------------
'atom-text-editor.vim-mode-plus.normal-mode':
  'y s': 'vim-mode-plus:surround'
  'y s w': 'vim-mode-plus:surround-word'
  'd s': 'vim-mode-plus:delete-surround-any-pair'
  'c s': 'vim-mode-plus:change-surround-any-pair'
  'y m s':  'vim-mode-plus:map-surround'

# Search mini editor
# -------------------------
'atom-text-editor.vim-mode-plus-search':
  'ctrl-r ctrl-w': 'vim-mode-plus:search-set-cursor-word'
  'ctrl-v':    'vim-mode-plus:search-set-literal-char'
  'ctrl-c':    'vim-mode-plus:search-cancel'
  'ctrl-[':    'vim-mode-plus:search-cancel'
  'shift-tab': 'vim-mode-plus:search-visit-prev'
  'tab':       'vim-mode-plus:search-visit-next'

  # Don't afraid to set following agressive keymap
  # If you want input literlly, `ctrl-v` then input char you want to insert
  # on search field.
  'ctrl-g': 'vim-mode-plus:search-cancel'
  ';': 'vim-mode-plus:search-confirm'
  '[': 'vim-mode-plus:search-visit-prev'
  ']': 'vim-mode-plus:search-visit-next'
  'space': 'vim-mode-plus:search-insert-wild-pattern'
  'ctrl-f': 'vim-mode-plus:search-scroll-next'
  'ctrl-b': 'vim-mode-plus:search-scroll-prev'
